#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# trainer - Generate model file 'training_data' based on json files
#
# @see      Useful links
#           - https://github.com/adbar/simplemma/
#             https://adrien.barbaresi.eu/blog/simple-multilingual-lemmatizer-python.html
#
print("- Loading trainer engine", flush=True)
import os
import sys
import datetime
timeStart = datetime.datetime.now()
#
# 0 = all messages are logged (default behavior)
# 1 = INFO messages are not printed
# 2 = INFO and WARNING messages are not printed
# 3 = INFO, WARNING, and ERROR messages are not printed
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
try:
    # System libraries
    import nltk
    import numpy
    import random
    import pickle
    import pathlib
    import simplemma
    from keras.models import Sequential
    from keras.layers import Dense, Dropout
    # from keras.optimizers import SGD
    from tensorflow.keras.optimizers import SGD         # type: ignore

    # Program defines
    import intent
    import defines
    from   botserver_config import serverConfiguration

except ModuleNotFoundError as E:
    print(f"{E}. Install required modules.")
    sys.exit(1)


# Phase [1]. Loading json database
words           = []                                    # Set of words in all [intents]
classes         = []                                    # List of unique tags in [intents]
documents       = []                                    # Tuple of sentences for each tag in [intents]
ignore_words    = ['?', '!']                            # Ignore these words from learning process
dbPath = str(pathlib.Path(__file__).parent.resolve()) + os.path.sep + ".." + os.path.sep + "db"
intents = intent.database(dbPath)
# Loading lemmatizer (localized): [languageData] dictionary, using simplemma.lemmatize() directly
# I'm using a lemmatizer, a stemmer is not ideal in this case
languageData = None
try:
    serverConfig = serverConfiguration(configFile='../config.yaml')
    languageData = simplemma.load_data(*(serverConfig.property['language']))
except Exception as E:
    print(f"{E}. Cannot load configuration from botserver [config.yaml] file")
    sys.exit(1)

# Phase [2]. Preprocess data
print("- Preprocess data [words,documents,classes]", flush=True)
# Words splitting
for intent in intents.list['intents']:
    for pattern in intent['patterns']:
        w = nltk.word_tokenize(pattern)                     # Tokenize each word
        words.extend(w)
        documents.append((w, intent['tag']))                # Add documents in the corpus
        # Add to our classes list
        if intent['tag'] not in classes:
            classes.append(intent['tag'])
# lemmatize and lower each word and remove duplicates
words = [simplemma.lemmatize(w.lower(), languageData) for w in words if w not in ignore_words]
words = sorted(list(set(words)))
# sort classes list
classes = sorted(list(set(classes)))
print("- Training model", flush=True)
print("  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
# documents = combination between patterns and intents
print(f"    - Documents           {len(documents)}")
print(f"                          {documents}")
# classes = intents
print(f"    - Classes             {len(classes)}")
print(f"                          {classes}")
# words = all words, vocabulary
print(f"    - Lemmatized Words    {len(words)}")
print(f"                          {words}")
fileWords   = dbPath + os.path.sep + defines.FILE_WORDS
fileClasses = dbPath + os.path.sep + defines.FILE_CLASSES
pickle.dump(words,open(fileWords,'wb'))
pickle.dump(classes,open(fileClasses,'wb'))


# Phase [3]. Create training and testing data
print()
print("- Creating training data", flush=True)
print("  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
# create our training data
training = []
# create an empty array for our output
output_empty = [0] * len(classes)

# training set, bag of words for each sentence
for doc in documents:
    # initialize our bag of words
    bag = []
    # list of tokenized words for the pattern
    pattern_words = doc[0]
    # lemmatize each word - create base word, in attempt to represent related words
    pattern_words = [simplemma.lemmatize(word.lower(), languageData) for word in pattern_words]
    # create our bag of words array with 1, if word match found in current pattern
    for w in words:
        bag.append(1) if w in pattern_words else bag.append(0)
    
    # output is a '0' for each tag and '1' for current tag (for each pattern)
    output_row = list(output_empty)
    output_row[classes.index(doc[1])] = 1
    
    training.append([bag, output_row])

# shuffle our features and turn into np.array
random.shuffle(training)
training = numpy.array(training, dtype=object)
# create train and test lists. X - patterns, Y - intents
train_x = list(training[:,0])
train_y = list(training[:,1])
print("    - Training data created")

# Phase [4]. Build the model
# Create model - 3 layers. First layer 128 neurons, second layer 64 neurons and 3rd output layer contains number of neurons
# equal to number of intents to predict output intent with softmax
model = Sequential()
model.add(Dense(128, input_shape=(len(train_x[0]),), activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(64, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(len(train_y[0]), activation='softmax'))

# Compile model. Stochastic gradient descent with Nesterov accelerated gradient gives good results for this model
sgd = SGD(learning_rate=0.01, decay=1e-6, momentum=0.9, nesterov=True)
model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])

# Fitting and saving the model 
hist = model.fit(numpy.array(train_x), numpy.array(train_y), epochs=200, batch_size=5, verbose=0)
fileModel = dbPath + os.path.sep + defines.FILE_MODEL
model.save(fileModel, hist)

print("    - Model saved")
print(f"        Words {fileWords}")
print(f"        Class {fileClasses}")
print(f"        Model {fileModel}")

timeEnd  = datetime.datetime.now()
timeDiff = timeEnd - timeStart
timeDiffSeconds = timeDiff.total_seconds()
days    = divmod(timeDiffSeconds, 86400)      # Get days (without [0]!)
hours   = divmod(days[1], 3600)               # Use remainder of days to calc hours
minutes = divmod(hours[1], 60)                # Use remainder of hours to calc minutes
seconds = divmod(minutes[1], 1)               # Use remainder of minutes to calc seconds
print()
print("- Generation completed in:  {days} days, {hours} hours, {minutes} minutes, {seconds} seconds".format(
      days=int(days[0]), hours=int(hours[0]), minutes=int(minutes[0]), seconds=int(seconds[0])))
print("    Start   {}".format(str(timeStart)))
print("    End     {}".format(str(timeEnd)))
print()
