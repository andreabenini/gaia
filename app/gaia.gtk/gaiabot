#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# GAIA bot - GAIA bot GTK application
#
# pyright: reportMissingImports=false
# pyright: reportMissingModuleSource=false
#
import sys
try:
    # GTK imports
    import gi                               # pip install [vext|vext.gi]
    gi.require_version("Gtk", "3.0")        # Must be specified to avoid warnings
    from gi.repository import GLib, Gio, Gtk
    # import ssl
    # import yaml
    # import socket
    # import OpenSSL
    # import datetime
    import argparse
    # import threading
except ModuleNotFoundError as E:
    print(f"{E}. Install required module.")
    sys.exit(1)

# from botserver import defines
# TCP_SOCKET_TIMEOUT = 5
# class botCtl:
#     @property
#     def valid(self):
#         return self.__valid
#     @property
#     def debug(self):
#         return self.__debug
#     @debug.setter
#     def debug(self, boolValue):
#         if isinstance(boolValue, (bool)):
#             self.__debug = boolValue
#         else:
#             self.__debug = False
#     def __debugPrint(self, message=None):
#         if self.debug:
#             print(f"DEBUG>  {message}")
#     def __error(self, message=None):
#         print(message)
#         sys.exit(1)

#     # Load SSL local context
#     def __loadSSL(self):
#         try:
#             self.__context = ssl.create_default_context(purpose=ssl.Purpose.SERVER_AUTH, cafile=self.__caCertificate)
#             self.__context.load_cert_chain(certfile=self.__clientCertificate, keyfile=self.__clientKey)  # Load client certificate
#             # context.options |= ssl.OP_NO_TLSv1 | ssl.OP_NO_TLSv1_1  # optional
#             if self.__ServerSelfSigned:
#                 self.__context.check_hostname = False
#                 self.__context.verify_mode = ssl.CERT_NONE
#             else:
#                 self.__context.verify_mode = ssl.CERT_REQUIRED
#                 if self.__host in ['127.0.0.1', 'localhost', '::1']:        # Verify remote certificate (on remote, with a "real" hostname) or skip it when localhost
#                     self.__context.check_hostname = False
#                 else:
#                     self.__context.check_hostname = True
#         except Exception as E:
#             self.__error(str(E))

#     def __certInfo(self, cert, section, field):
#         return 

#     # TCP client connection method
#     def __connect(self):
#         try:
#             # Connect
#             print(f"Trying {self.__host}:{self.__port}...")
#             self.__clientSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
#             self.__socket = self.__context.wrap_socket(self.__clientSocket, server_hostname=self.__host)
#             self.__socket.settimeout(TCP_SOCKET_TIMEOUT)
#             self.__socket.connect((self.__host, self.__port))
#             # Obtain certificate from server and check its validity
#             binaryCertificate = self.__socket.getpeercert(binary_form=True)
#             if not binaryCertificate:
#                 raise Exception('Unable to retrieve server certificate')
#             x509 = OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_ASN1, binaryCertificate)
#             expiryStart = datetime.datetime.strptime(x509.get_notBefore().decode('ascii'), '%Y%m%d%H%M%SZ')
#             expiryEnd   = datetime.datetime.strptime(x509.get_notAfter().decode('ascii'),  '%Y%m%d%H%M%SZ')
#             isExpired   = (expiryStart > datetime.datetime.now()) or (expiryEnd < datetime.datetime.now())
#             if isExpired:
#                 raise ValueError(f"Client certificate expired [{expiryStart} -> {expiryEnd}], disconnecting")
#             # Checks completed, cert valid. Now some nice output
#             print(f"Connected to {self.__host}:{self.__port}")
#             print(f"             Common Name: {x509.get_subject().CN}")
#             print(f"             [{expiryStart} -> {expiryEnd}]")
#             print()
#         except Exception as E:
#             self.__error(str(E))

#     # Constructor
#     def __init__(self, configuration=None, host=None, debug=False):
#         self.__valid = False
#         try:
#             # yaml loading
#             fHandler = open(configuration)
#             if not fHandler: raise Exception(f"Cannot open '{configuration}' file")
#             config = yaml.safe_load(fHandler)
#             fHandler.close()
#             if 'botserverHost'    not in config: raise Exception("[botserverHost] not found in configuration file")
#             if 'botserverPort'    not in config: raise Exception("[botserverPort] not found in configuration file")
#             # Host connection
#             if host:
#                 self.__host = host
#             else:
#                 hostList = config['botserverHost'].split(',')
#                 if len(hostList)==0 or hostList[0]=='':
#                     self.__host = '127.0.0.1'
#                 else:
#                     self.__host = hostList[0]
#             # Port, timeout
#             self.__port    = int(config['botserverPort'])
#             config['botserverTimeout'] = int(config['botserverTimeout']) if 'botserverTimeout' in config else 20
#             self.__timeout = config['botserverTimeout']-5 if config['botserverTimeout']-5 > 0 else 20
#             # Debug mode
#             self.debug = debug
#             # Verify server self signed certificate on client side. Default: False
#             if 'clientVerifySelfSigned' in config:
#                 self.__ServerSelfSigned = bool(config['clientVerifySelfSigned'])
#             else:
#                 self.__ServerSelfSigned = False
#             # Certification files checkings
#             dirCertificates = os.path.dirname(configuration)
#             dirCertificates = ('.' if dirCertificates=='' else dirCertificates) + os.path.sep + 'certs' + os.path.sep
#             if 'clientCertificates' in config:      # Client configuration detected, use these info instead of default ones
#                 if 'ca' not in config['clientCertificates'] or 'certificate' not in config['clientCertificates'] or 'key' not in config['clientCertificates']:
#                     raise Exception(f"Invalid configuration file: {configuration}")
#                 self.__caCertificate     = self.__checkFile('', config['clientCertificates']['ca'])
#                 self.__clientCertificate = self.__checkFile('', config['clientCertificates']['certificate'])
#                 self.__clientKey         = self.__checkFile('', config['clientCertificates']['key'])
#             else:
#                 self.__caCertificate     = self.__checkFile(dirCertificates, "ca_cert.pem")
#                 self.__clientCertificate = self.__checkFile(dirCertificates, "client_cert.pem")
#                 self.__clientKey         = self.__checkFile(dirCertificates, "client_key.pem")
#             self.__lock = False
#             self.__valid = True
#         except Exception as e:
#             self.__error(str(e))

#     # Detecting if certificates are there when needed
#     def __checkFile(self, dir, filename):
#         if os.path.exists(dir + filename):
#             return dir+filename
#         else:
#             raise Exception(f"File  {dir}{filename}  not found")

#     # TCP keepalive with dummy messages
#     def __keepAlive(self):
#         while self.valid:
#             self.__send('sys,ping')
#             _ = self.__receive()
#             time.sleep(self.__timeout)
#         os.kill(os.getpid(), signal.SIGUSR1)

#     # Send/Receive functions
#     def __send(self, message):
#         while self.__lock:
#             time.sleep(1)
#         self.__lock = True
#         try:
#             self.__socket.send((message+'\n').encode('UTF-8'))
#         except ssl.SSLEOFError:
#             print("\nERROR: Connection closed")
#             self.__valid = False
#             os.kill(os.getpid(), signal.SIGUSR1)
#     def __receive(self):
#         try:
#             if not self.valid:
#                 return None
#             message = self.__socket.recv(1024)
#             self.__lock = False
#             return message
#         except TimeoutError:
#             self.__valid = False
#             return None


#     # Main Loop
#     def start(self):
#         signal.signal(signal.SIGUSR1, closeProgram)
#         self.__loadSSL()
#         self.__connect()
#         cmd = None
#         threading.Thread(target=self.__keepAlive, args=(), daemon=True).start()
#         while cmd!='exit' and cmd!='sys,exit' and cmd!='sys,shutdown' and self.valid:
#             try:
#                 cmd = input("> ").strip()
#                 if cmd!=None and cmd!='' and cmd!='exit':
#                     self.__send(cmd)
#                     msg = self.__receive()
#                     if msg:
#                         msg = msg.decode('UTF-8').strip()
#                         print(msg)
#                     else:
#                         print("Disconnected from remote")
#                         cmd = 'exit'
#             except ValueError:
#                 print("Something to do here...")
#             except socket.error:
#                 self.__error(f"Cannot send '{cmd}'")
#         self.__valid = False

# def closeProgram(_,__):     # signal,frame
#     print("")
#     sys.exit(1)

@Gtk.Template.from_file("gaiabot.glade")
class AppWindow(Gtk.ApplicationWindow):
    __gtype_name__ = "formMain"

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.builder = Gtk.Builder()

    @Gtk.Template.Callback()
    def do_menuAbout(self, widget, **_kwargs):
        self.get_application().action_about()

    @Gtk.Template.Callback()
    def do_menuQuit(self, widget, **_kwargs):
        self.get_application().action_quit()

    @Gtk.Template.Callback()
    def do_input(self, widget, **_kwargs):
        textInput = self.builder.get_object('textInput')
        # textInput = self.builder.get_object('input')
        print(textInput)
        print(textInput.get_text())

        # print(self.ui.textInput.get_text())

        # print(self['textInput'].get_text())

        self.get_application().action_input(widget.get_text())
        widget.set_text('')


class Application(Gtk.Application):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, application_id="io.github.andreabenini.gaiabot", flags=Gio.ApplicationFlags.HANDLES_COMMAND_LINE, **kwargs)
        # super().__init__(*args, application_id="io.github.andreabenini.gaiabot", flags=Gio.ApplicationFlags.FLAGS_NONE, **kwargs)
        self.window = None
        self.add_main_option("debug", ord("d"), gi.repository.GLib.OptionFlags.NONE, gi.repository.GLib.OptionArg.NONE, "Verbose debug on stdout", None, )
        self.__debug = False

    def __log(self, message=None, type="INFO"):
        if self.__debug:
            print(f"{type:10} {message}")

    def do_startup(self):
        Gtk.Application.do_startup(self)

    def do_activate(self):
        # Only allow a single window and raise any existing ones
        # Windows are associated with the application when the last one is closed the application shuts down
        self.window = self.window or AppWindow(application=self)
        self.window.present()
        self.__log("Application started")

    def do_command_line(self, command_line):
        options = command_line.get_options_dict()
        options = options.end().unpack()            # convert GVariantDict -> GVariant -> dict
        if "debug" in options:                      # options['debug']
            self.__debug = True
        self.activate()
        return 0

    
    def action_quit(self):
        self.__log("Closing application")
        self.quit()

    def action_about(self):
        about_dialog = Gtk.AboutDialog(transient_for=self.window, modal=True)
        about_dialog.present()

    def action_input(self, text):
        self.__log(text)

if __name__ == '__main__':
    try:
        app = Application()
        app.run(sys.argv)
    except KeyboardInterrupt:
        print("\nInterrupt request, utility aborted\n")
