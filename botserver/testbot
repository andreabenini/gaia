#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Dummy test program on console, NO TCP server or other fancy frills
# Raw command line to evaluate just the chat engine
#
import os
import sys
print("Loading...", flush=True)
try:
    # Python includes
    import pathlib
    import argparse
    # Program includes
    from chatengine import chatEngine
except ModuleNotFoundError as E:
    print(f"{E}. Install required modules.")
    sys.exit(1)

def printHelp():
    print()
    print("'.'      to repeat last command")
    print("'reload' to reload knowledge database")
    print("'help'   print this help")
    print("'exit'   to close program")
    print("<msg>    message to send to chatbot")
    print("Ctrl+C   to abort\n")


# Main
if __name__ == '__main__':
    try:
        # Command line arguments
        parser = argparse.ArgumentParser(description='Chatbot test console')
        parser.add_argument('-U', '--username', metavar='USER', type=str, help='Username upon login', default='')
        args = parser.parse_args()
        username = args.username.strip()

        # Chat engine setup
        engine = chatEngine(pathProgram=str(pathlib.Path(__file__).parent.resolve())+os.path.sep+"..", debug=True)
        if not engine.valid:
            print(f'chatEngine not correctly initialized ({engine.error})')
            sys.exit(1)
        cmd = ''
        # Input username
        print("\nTest command console, just write your username and start talking")
        if not username:
            username = input('Username> ').strip()
            if not username or username == '' or username=='exit':
                print("Invalid username")
                sys.exit(1)
        printHelp()

        # Main loop
        print(f"[username: {username}]")
        while cmd != 'exit':
            cmdLast = cmd
            cmd = input("> ").strip()
            if cmd == '.':
                cmd = cmdLast
            if not cmd or cmd == '' or cmd == 'exit':
                pass
            elif cmd == 'help':
                printHelp()
            elif cmd == 'reload':
                print("Reloading database engine")
                engine.reload()
            else:
                print(engine.message(username=username, message=cmd))
        print()
    except KeyboardInterrupt:
        print("\nInterrupt request, program aborted\n")
