#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#   botctl - Bot Command Line Utility
#
import os
import sys
import time
try:
    import ssl
    import yaml
    import socket
    import OpenSSL
    import datetime
    import argparse
    import threading
except ModuleNotFoundError as E:
    print(f"{E}. Install required module.")
    sys.exit(1)


TCP_SOCKET_TIMEOUT = 5

class botCtl:
    @property
    def valid(self):
        return self.__valid
    @property
    def debug(self):
        return self.__debug
    @debug.setter
    def debug(self, boolValue):
        if isinstance(boolValue, (bool)):
            self.__debug = boolValue
        else:
            self.__debug = False
    def __debugPrint(self, message=None):
        if self.debug:
            print(f"DEBUG>  {message}")
    def __error(self, message=None):
        print(message)
        sys.exit(1)

    # Load SSL local context
    def __loadSSL(self):
        try:
            # self.__context = ssl.SSLContext()
            self.__context = ssl.create_default_context(purpose=ssl.Purpose.SERVER_AUTH, cafile=self.__caCertificate)
            self.__context.verify_mode = ssl.CERT_REQUIRED
            # self.__context.load_verify_locations(self.__caCertificate)     # CA certificate with which the client will validate the server certificate
            self.__context.load_cert_chain(certfile=self.__clientCertificate, keyfile=self.__clientKey)  # Load client certificate
            # context.options |= ssl.OP_NO_TLSv1 | ssl.OP_NO_TLSv1_1  # optional
            
            # Verify remote certificate (on remote, with a "real" hostname) or skip it when localhost
            if self.__host in ['127.0.0.1', 'localhost', '::1']:
                self.__context.check_hostname = False
            else:
                self.__context.check_hostname = True
        except Exception as E:
            self.__error(str(E))

    def __certInfo(self, cert, section, field):
        return 

    # TCP client connection method
    def __connect(self, host=None, port=None):
        try:
            print(f"Trying {host}:{port}...")
            self.__clientSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.__socket = self.__context.wrap_socket(self.__clientSocket)     #, server_hostname=self.__host)
            self.__socket.settimeout(TCP_SOCKET_TIMEOUT)
            self.__socket.connect((host, port))
            # Obtain certificate from server and check its validity
            binaryCertificate = self.__socket.getpeercert(binary_form=True)
            if not binaryCertificate:
                raise Exception('Unable to retrieve server certificate')
            x509 = OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_ASN1, binaryCertificate)
            expiryStart = datetime.datetime.strptime(x509.get_notBefore().decode('ascii'), '%Y%m%d%H%M%SZ')
            expiryEnd   = datetime.datetime.strptime(x509.get_notAfter().decode('ascii'),  '%Y%m%d%H%M%SZ')
            isExpired   = (expiryStart > datetime.datetime.now()) or (expiryEnd < datetime.datetime.now())
            if isExpired:
                raise ValueError(f"Client certificate expired [{expiryStart} -> {expiryEnd}], disconnecting")
            # Checks completed, cert valid. Now some nice output
            print(f"Connected to {self.__host}:{self.__port}")
            print(f"             Common Name: {x509.get_subject().CN}")
            print(f"             [{expiryStart} -> {expiryEnd}]")
            print()
        except Exception as E:
            self.__error(str(E))

    # Constructor
    def __init__(self, configuration=None, debug=False):
        self.__valid = False
        try:
            # yaml loading
            fHandler = open(configuration)
            if not fHandler: raise Exception(f"Cannot open '{configuration}' file")
            config = yaml.safe_load(fHandler)
            fHandler.close()
            if 'botserverHost'    not in config: raise Exception("[botserverHost] not found in configuration file")
            if 'botserverPort'    not in config: raise Exception("[botserverPort] not found in configuration file")
            config['botserverTimeout'] = int(config['botserverTimeout']) if 'botserverTimeout' in config else 20
            self.__host    = config['botserverHost']
            self.__port    = int(config['botserverPort'])
            self.__timeout = config['botserverTimeout']-5 if config['botserverTimeout']-5 > 0 else 20
            self.debug = debug

            # Certification files checkings
            dirCertificates = os.path.dirname(configuration)
            dirCertificates = ('.' if dirCertificates=='' else dirCertificates) + os.path.sep + 'certs' + os.path.sep
            self.__caCertificate     = self.__checkFile(dirCertificates, "ca_cert.pem")
            self.__clientCertificate = self.__checkFile(dirCertificates, "client_cert.pem")
            self.__clientKey         = self.__checkFile(dirCertificates, "client_key.pem")
            self.__lock = False
            self.__valid = True
        except Exception as e:
            self.__error(str(e))

    # Detecting if certificates are there when needed
    def __checkFile(self, dir, filename):
        if os.path.exists(dir + filename):
            return dir+filename
        else:
            raise Exception(f"File  {dir}{filename}  not found")

    # TCP keepalive with dummy messages
    def __keepAlive(self):
        while self.valid:
            time.sleep(self.__timeout)
            self.__send('sys,ping')
            _ = self.__receive()

    # Send/Receive functions
    def __send(self, message):
        while self.__lock:
            time.sleep(1)
        self.__lock = True
        self.__socket.send((message+'\n').encode('UTF-8'))
    def __receive(self):
        message = self.__socket.recv(1024)
        self.__lock = False
        return message

    # Main Loop
    def start(self):
        self.__loadSSL()
        self.__connect(host=self.__host, port=self.__port)
        cmd = None
        threading.Thread(target=self.__keepAlive, args=(), daemon=True).start()
        while cmd!='exit' and cmd!='sys,exit' and cmd!='sys,shutdown':
            try:
                cmd = input("> ").strip()
                if cmd!=None and cmd!='' and cmd!='exit':
                    self.__send(cmd)
                    msg = self.__receive()
                    if msg:
                        msg = msg.decode('UTF-8').strip()
                        print(msg)
                    else:
                        print("Disconnected from remote")
                        cmd = 'exit'
            except socket.error:
                self.__error(f"Cannot send '{cmd}'")
        self.__valid = False


if __name__ == '__main__':
    try:
        # Parsing command line params
        parser = argparse.ArgumentParser(description='Bot command line interface')
        parser.add_argument('-d', '--debug',  dest='debug',   action='store_true', help='Turn on debugging')
        parser.add_argument('-c', '--configuration', metavar='CONFIG', type=str,   help='Client configuration file [default: config.yaml]', default='config.yaml')
        parser.set_defaults(debug=False)
        args = parser.parse_args()

        # Command line interface console startup
        botCommandLine = botCtl(configuration=args.configuration, debug=args.debug)
        if botCommandLine.valid:
            botCommandLine.start()
    except KeyboardInterrupt:
        print("\nInterrupt request, utility aborted\n")
