#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Python botserver daemon
# @see:
#       Message format:
#           "sys,command"           System command [exit, shutdown, ping, version]
#           "msg,username,message"  Send message to username
#
# pyright: reportMissingImports=false
# pyright: reportMissingModuleSource=false

# Program imports
import sys
try:
    import ssl
    import socket
    import select
    import OpenSSL                  # pyOpenSSL
    import datetime
    import threading
except ModuleNotFoundError as E:
    print(f"{E}. Install required modules.")
    sys.exit(1)

# Program includes
import defines
from botserver_config import serverConfiguration
from chatengine import chatEngine


# No need for fancy debug classes, DEBUG.[ON|OFF|VERBOSE|FULL] is enough
def enum(**enums):
    return type('Enum', (), enums)
def enumNames(enumObj):
    fields = [field for field in enumObj.__dict__.keys() if not field.startswith('_')]
    return fields
DEBUG = enum(ERROR=-1, INFO=0, OFF=1, DEBUG=2, VERBOSE=3, FULL=4)


# Main (and only) class
class serverDaemon:
    @property
    def debug(self):
        return self._debug
    @debug.setter
    def debug(self, value):
        if isinstance(value, (int)):
            self._debug = value
        else:
            self._debug = DEBUG.OFF

    # Aborting daemon on error
    def __exit(self, message='', errorlevel=1):
        print("\nERROR: Program aborted")
        if message != '': print(f"ERROR: {message}")
        print("")
        sys.exit(errorlevel)

    # Object constructor
    def __init__(self, config=None, debug=DEBUG.OFF):
        self.__config = config
        if not self.__config.valid:
            self.__exit(message=self.__config.error)
        self.debug = debug
        self.__running = True
        # Incoming connection limit (pretty low, local usage only). Default:5
        self.__tcpListenClients = int(self.__config.property['botserverConnections']) if int(self.__config.property['botserverConnections'])>0 else 5
        # TCP socket creation (multiple sockets are allowed)
        self.__tcpTimeout = self.__config.property['botserverTimeout']
        self.__tcpBufferSize = 1024
        self.__sockList = []
        self.__debugPrint(message=f"Daemon started [tcp timeout: {self.__tcpTimeout}s]", level=DEBUG.INFO)
        interfaceList = self.__config.property['botserverHost'].split(',')
        if len(interfaceList) > 0:
            for socketName in interfaceList:
                self.__socketConnect(socketName)
        else:
            self.__socketConnect('')

    # create,setsock,bind,listen a socket on [interface] address
    def __socketConnect(self, interface):
        if interface:
            interfaceAddress = interfaceLabel = interface
        else:
            interfaceLabel = '(ANY)'
            interfaceAddress = '0.0.0.0'
        self.__debugPrint(message=f"    interface {(interfaceLabel, self.__config.property['botserverPort'])}", level=DEBUG.INFO)
        socketListen = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        socketListen.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        socketListen.bind((interfaceAddress, self.__config.property['botserverPort']))
        socketListen.listen(self.__tcpListenClients)
        socketListen.settimeout(self.__tcpTimeout)
        self.__sockList.append(socketListen)

    # Program main loop
    def loop(self):
        self.__debugPrint(message="Loading chat engine")
        self.__engine = chatEngine(pathProgram=self.__config.path)
        if not self.__engine.valid:
            self.__exit(errorlevel=2, message=self.__engine.error+', chatEngine not initialized, aborting daemon')
        # Create SSL context for creating a secure socket
        context = ssl.create_default_context(purpose=ssl.Purpose.CLIENT_AUTH, cafile=self.__config.caCertificate)
        context.verify_mode = ssl.CERT_REQUIRED
        context.load_cert_chain(self.__config.serverCertificate, self.__config.serverKey)
        # Server loop
        while self.__running:                                                       # Until self.__socketClose(self.__sock)
            # Read,Write,Except                      inputs,   outputs,   inputs            [[[ SELECT ]]]
            readSocketList, _, _ = select.select(self.__sockList, [], self.__sockList)
            for currentSocket in readSocketList:
                try:
                    Client, Address = currentSocket.accept()
                    secureClientSocket = context.wrap_socket(Client, server_side=True)  # TLS, make socket connection to clients secure by using SSL wrapper

                    # Get certificate from client and validate it
                    clientCertificate = secureClientSocket.getpeercert(True)
                    if not clientCertificate:
                        self.__debugPrint("Invalid client certificate")
                        raise OSError()
                    x509 = OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_ASN1, clientCertificate)
                    expiryStart = datetime.datetime.strptime(x509.get_notBefore().decode('ascii'), '%Y%m%d%H%M%SZ')
                    expiryEnd   = datetime.datetime.strptime(x509.get_notAfter().decode('ascii'),  '%Y%m%d%H%M%SZ')
                    isExpired   = (expiryStart > datetime.datetime.now()) or (expiryEnd < datetime.datetime.now())
                    self.__debugPrint(entity=Address, level=DEBUG.VERBOSE,
                                      message=f"[Agent: {x509.get_subject().CN}]   [Expired:{isExpired}, {expiryStart} -> {expiryEnd}]")
                    if isExpired:
                        raise ValueError(f"Client certificate expired [{expiryStart} -> {expiryEnd}], disconnecting")
                    if x509.get_subject().CN not in self.__config.property['allowedClients']:
                        raise ValueError(f"Client not allowed, disconnecting")

                    # Reply to client
                    secureClientSocket.settimeout(self.__tcpTimeout)     # Client inactivity timeout (1min)
                    threading.Thread(target=self.__reply, args=(secureClientSocket, Address) ).start()

                except ValueError as e:
                    entity = Address if Address else '(unknown)'
                    self.__debugPrint(entity=entity, message=str(e), level=DEBUG.ERROR)
                    self.__socketClose(Client)
                except OSError:                                         # Socket closed (maybe a daemon shutdown)
                    pass


    # Close an opened socket
    def __socketClose(self, tcpSocket):
        try:
            tcpSocket.shutdown(socket.SHUT_RDWR)
            tcpSocket.close()
        except OSError:
            pass

    # Threaded client connection reply
    def __reply(self, client, address):
        self.__debugPrint(address, 'connected')
        client.settimeout(self.__tcpTimeout)
        try:
            while True:
                # Parsing input message
                command = client.recv(self.__tcpBufferSize)
                if not command: return
                command = command.decode('UTF-8').strip().split(',', 2)
                self.__debugPrint(address, f"< {command}", level=DEBUG.FULL if command == ['sys', 'ping'] else DEBUG.VERBOSE)
                if len(command) < 2:
                    self.__debugPrint(address, "ERROR: invalid message, closing connection")
                    self.__socketClose(client)
                    return
                # Parsing system commands
                if command[0] == 'sys':
                    if command[1] == 'shutdown':
                        self.__debugPrint(message="daemon shutdown requested, closing application", level=DEBUG.INFO)
                        self.__sendMessage(client, 'shutdown')
                        self.__socketClose(client)
                        self.__daemonShutdown()
                        return
                    elif command[1] == 'exit':
                        self.__sendMessage(client, 'exit')
                        self.__socketClose(client)
                    elif command[1] == 'ping':
                        self.__sendMessage(client, 'pong')
                    elif command[1] == 'version':
                        self.__sendMessage(client, defines.NAME+' v'+defines.VERSION)
                    else:
                        self.__sendMessage(client, f"ERROR: Invalid system command ({command[1]})")
                # chatEngine message
                elif command[0] == 'msg':
                    if len(command) < 3:
                        self.__sendMessage(client, f"ERROR: Invalid format, must be: 'username,message'")
                    else:   # Reply to client
                        self.__sendMessage(client, self.__engine.message(username=command[1], message=command[2]))
                # invalid message
                else:
                    self.__sendMessage(client, f"ERROR: Invalid command ({command})")
        except socket.timeout:
            self.__debugPrint(address, "disconnected for timeout")
            self.__socketClose(client)
        except OSError:
            self.__debugPrint(address, "client disconnected")                # No need to close socket

    # TCP send message back to client
    def __sendMessage(self, client=None, message=None):
        self.__debugPrint(entity=client.getpeername(), message=f"> {message}", level = DEBUG.FULL if message == 'pong' else DEBUG.VERBOSE)
        client.send((str(message)+'\n').encode('UTF-8'))

    # Local debug print on stdout when needed
    def __debugPrint(self, entity='botserver', message=None, level=DEBUG.DEBUG):
        if self.debug >= level:
            print(f"{str(enumNames(DEBUG)[level]).ljust(7)} {str(entity).ljust(21)} {message}")

    # System daemon shutdown
    def __daemonShutdown(self):
        for socket in self.__sockList:
            self.__socketClose(socket)
        self.__running = False


if __name__ == '__main__':
    try:
        daemon = serverDaemon(config=serverConfiguration(), debug=DEBUG.VERBOSE)
        daemon.loop()
    except KeyboardInterrupt:
        print("\nInterrupt request, daemon aborted\n")
